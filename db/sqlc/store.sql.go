// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: store.sql

package db

import (
	"context"
)

const createStore = `-- name: CreateStore :one
Insert Into store (line_id, store_name, address)
VALUES ($1, $2, $3)
RETURNING id, line_id, store_name, address, created_at, updated_at
`

type CreateStoreParams struct {
	LineID    string `json:"line_id"`
	StoreName string `json:"store_name"`
	Address   string `json:"address"`
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, createStore, arg.LineID, arg.StoreName, arg.Address)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.LineID,
		&i.StoreName,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStore = `-- name: DeleteStore :exec
DELETE FROM store
WHERE id = $1
`

func (q *Queries) DeleteStore(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteStore, id)
	return err
}

const getStore = `-- name: GetStore :one
SELECT id, line_id, store_name, address, created_at, updated_at
FROM store
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetStore(ctx context.Context, id int32) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStore, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.LineID,
		&i.StoreName,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listStores = `-- name: ListStores :many
SELECT id, line_id, store_name, address, created_at, updated_at
FROM store
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListStoresParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStores(ctx context.Context, arg ListStoresParams) ([]Store, error) {
	rows, err := q.db.QueryContext(ctx, listStores, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.LineID,
			&i.StoreName,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStore = `-- name: UpdateStore :one
UPDATE store
SET line_id = $2,
  store_name = $3,
  address = $4
WHERE id = $1
RETURNING id, line_id, store_name, address, created_at, updated_at
`

type UpdateStoreParams struct {
	ID        int32  `json:"id"`
	LineID    string `json:"line_id"`
	StoreName string `json:"store_name"`
	Address   string `json:"address"`
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, updateStore,
		arg.ID,
		arg.LineID,
		arg.StoreName,
		arg.Address,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.LineID,
		&i.StoreName,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
