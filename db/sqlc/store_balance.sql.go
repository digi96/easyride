// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: store_balance.sql

package db

import (
	"context"
)

const createStoreBalance = `-- name: CreateStoreBalance :one
Insert Into store_balance (store_id, amount, type_id)
VALUES ($1, $2, $3)
RETURNING id, store_id, amount, type_id, created_at, updated_at
`

type CreateStoreBalanceParams struct {
	StoreID int32  `json:"store_id"`
	Amount  int32  `json:"amount"`
	TypeID  string `json:"type_id"`
}

func (q *Queries) CreateStoreBalance(ctx context.Context, arg CreateStoreBalanceParams) (StoreBalance, error) {
	row := q.db.QueryRowContext(ctx, createStoreBalance, arg.StoreID, arg.Amount, arg.TypeID)
	var i StoreBalance
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Amount,
		&i.TypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStoreBalance = `-- name: GetStoreBalance :one
SELECT id, store_id, amount, type_id, created_at, updated_at
FROM store_balance
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetStoreBalance(ctx context.Context, id int32) (StoreBalance, error) {
	row := q.db.QueryRowContext(ctx, getStoreBalance, id)
	var i StoreBalance
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Amount,
		&i.TypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listStoreBalances = `-- name: ListStoreBalances :many
SELECT id, store_id, amount, type_id, created_at, updated_at
FROM store_balance
WHERE store_id = $1
ORDER BY id
`

func (q *Queries) ListStoreBalances(ctx context.Context, storeID int32) ([]StoreBalance, error) {
	rows, err := q.db.QueryContext(ctx, listStoreBalances, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StoreBalance
	for rows.Next() {
		var i StoreBalance
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.Amount,
			&i.TypeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
